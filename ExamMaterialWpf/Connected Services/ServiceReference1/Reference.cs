//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExamMaterialWpf.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ToDoItem", Namespace="http://schemas.datacontract.org/2004/07/ConsoleServer.Classes")]
    [System.SerializableAttribute()]
    public partial class ToDoItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCheckedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExamMaterialWpf.ServiceReference1.ToDoDate ToDoDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ToDoDateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsChecked {
            get {
                return this.IsCheckedField;
            }
            set {
                if ((this.IsCheckedField.Equals(value) != true)) {
                    this.IsCheckedField = value;
                    this.RaisePropertyChanged("IsChecked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExamMaterialWpf.ServiceReference1.ToDoDate ToDoDate {
            get {
                return this.ToDoDateField;
            }
            set {
                if ((object.ReferenceEquals(this.ToDoDateField, value) != true)) {
                    this.ToDoDateField = value;
                    this.RaisePropertyChanged("ToDoDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ToDoDateId {
            get {
                return this.ToDoDateIdField;
            }
            set {
                if ((this.ToDoDateIdField.Equals(value) != true)) {
                    this.ToDoDateIdField = value;
                    this.RaisePropertyChanged("ToDoDateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ToDoDate", Namespace="http://schemas.datacontract.org/2004/07/ConsoleServer.Classes")]
    [System.SerializableAttribute()]
    public partial class ToDoDate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExamMaterialWpf.ServiceReference1.ToDoItem[] ToDoItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExamMaterialWpf.ServiceReference1.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExamMaterialWpf.ServiceReference1.ToDoItem[] ToDoItems {
            get {
                return this.ToDoItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ToDoItemsField, value) != true)) {
                    this.ToDoItemsField = value;
                    this.RaisePropertyChanged("ToDoItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExamMaterialWpf.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ConsoleServer.Classes")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExamMaterialWpf.ServiceReference1.ToDoDate[] DatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FacebookField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExamMaterialWpf.ServiceReference1.Friend[] FriendsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GithubField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExamMaterialWpf.ServiceReference1.Plan[] PlansField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TwitterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VkField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExamMaterialWpf.ServiceReference1.ToDoDate[] Dates {
            get {
                return this.DatesField;
            }
            set {
                if ((object.ReferenceEquals(this.DatesField, value) != true)) {
                    this.DatesField = value;
                    this.RaisePropertyChanged("Dates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Facebook {
            get {
                return this.FacebookField;
            }
            set {
                if ((object.ReferenceEquals(this.FacebookField, value) != true)) {
                    this.FacebookField = value;
                    this.RaisePropertyChanged("Facebook");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExamMaterialWpf.ServiceReference1.Friend[] Friends {
            get {
                return this.FriendsField;
            }
            set {
                if ((object.ReferenceEquals(this.FriendsField, value) != true)) {
                    this.FriendsField = value;
                    this.RaisePropertyChanged("Friends");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Github {
            get {
                return this.GithubField;
            }
            set {
                if ((object.ReferenceEquals(this.GithubField, value) != true)) {
                    this.GithubField = value;
                    this.RaisePropertyChanged("Github");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExamMaterialWpf.ServiceReference1.Plan[] Plans {
            get {
                return this.PlansField;
            }
            set {
                if ((object.ReferenceEquals(this.PlansField, value) != true)) {
                    this.PlansField = value;
                    this.RaisePropertyChanged("Plans");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Twitter {
            get {
                return this.TwitterField;
            }
            set {
                if ((object.ReferenceEquals(this.TwitterField, value) != true)) {
                    this.TwitterField = value;
                    this.RaisePropertyChanged("Twitter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Vk {
            get {
                return this.VkField;
            }
            set {
                if ((object.ReferenceEquals(this.VkField, value) != true)) {
                    this.VkField = value;
                    this.RaisePropertyChanged("Vk");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Friend", Namespace="http://schemas.datacontract.org/2004/07/ConsoleServer.Classes")]
    [System.SerializableAttribute()]
    public partial class Friend : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExamMaterialWpf.ServiceReference1.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExamMaterialWpf.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Plan", Namespace="http://schemas.datacontract.org/2004/07/ConsoleServer.Classes")]
    [System.SerializableAttribute()]
    public partial class Plan : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImportanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExamMaterialWpf.ServiceReference1.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Importance {
            get {
                return this.ImportanceField;
            }
            set {
                if ((this.ImportanceField.Equals(value) != true)) {
                    this.ImportanceField = value;
                    this.RaisePropertyChanged("Importance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Note {
            get {
                return this.NoteField;
            }
            set {
                if ((object.ReferenceEquals(this.NoteField, value) != true)) {
                    this.NoteField = value;
                    this.RaisePropertyChanged("Note");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Time {
            get {
                return this.TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeField, value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExamMaterialWpf.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Client", Namespace="http://schemas.datacontract.org/2004/07/ConsoleServer.Classes")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExamMaterialWpf.ServiceReference1.ToDoItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExamMaterialWpf.ServiceReference1.ToDoItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExamMaterialWpf.ServiceReference1.ToDoDate))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExamMaterialWpf.ServiceReference1.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExamMaterialWpf.ServiceReference1.ToDoDate[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExamMaterialWpf.ServiceReference1.Friend[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExamMaterialWpf.ServiceReference1.Friend))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExamMaterialWpf.ServiceReference1.Plan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExamMaterialWpf.ServiceReference1.Plan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExamMaterialWpf.ServiceReference1.Client[]))]
    public partial class Client : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object CallbackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExamMaterialWpf.ServiceReference1.User UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Callback {
            get {
                return this.CallbackField;
            }
            set {
                if ((object.ReferenceEquals(this.CallbackField, value) != true)) {
                    this.CallbackField = value;
                    this.RaisePropertyChanged("Callback");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExamMaterialWpf.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService", CallbackContract=typeof(ExamMaterialWpf.ServiceReference1.IServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddToDoItem", ReplyAction="http://tempuri.org/IService/AddToDoItemResponse")]
        void AddToDoItem(int listId, bool isCheked, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddToDoItem", ReplyAction="http://tempuri.org/IService/AddToDoItemResponse")]
        System.Threading.Tasks.Task AddToDoItemAsync(int listId, bool isCheked, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveToDoItem", ReplyAction="http://tempuri.org/IService/RemoveToDoItemResponse")]
        void RemoveToDoItem(int listId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveToDoItem", ReplyAction="http://tempuri.org/IService/RemoveToDoItemResponse")]
        System.Threading.Tasks.Task RemoveToDoItemAsync(int listId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditToDoItem", ReplyAction="http://tempuri.org/IService/EditToDoItemResponse")]
        void EditToDoItem(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditToDoItem", ReplyAction="http://tempuri.org/IService/EditToDoItemResponse")]
        System.Threading.Tasks.Task EditToDoItemAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetToDoDateId", ReplyAction="http://tempuri.org/IService/GetToDoDateIdResponse")]
        int GetToDoDateId(int userId, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetToDoDateId", ReplyAction="http://tempuri.org/IService/GetToDoDateIdResponse")]
        System.Threading.Tasks.Task<int> GetToDoDateIdAsync(int userId, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetToDoItemsList", ReplyAction="http://tempuri.org/IService/GetToDoItemsListResponse")]
        ExamMaterialWpf.ServiceReference1.ToDoItem[] GetToDoItemsList(int listId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetToDoItemsList", ReplyAction="http://tempuri.org/IService/GetToDoItemsListResponse")]
        System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.ToDoItem[]> GetToDoItemsListAsync(int listId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddFriend", ReplyAction="http://tempuri.org/IService/AddFriendResponse")]
        void AddFriend(string email, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddFriend", ReplyAction="http://tempuri.org/IService/AddFriendResponse")]
        System.Threading.Tasks.Task AddFriendAsync(string email, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddToDoDate", ReplyAction="http://tempuri.org/IService/AddToDoDateResponse")]
        void AddToDoDate(int userId, string date, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddToDoDate", ReplyAction="http://tempuri.org/IService/AddToDoDateResponse")]
        System.Threading.Tasks.Task AddToDoDateAsync(int userId, string date, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveToDoDate", ReplyAction="http://tempuri.org/IService/RemoveToDoDateResponse")]
        void RemoveToDoDate(int userId, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveToDoDate", ReplyAction="http://tempuri.org/IService/RemoveToDoDateResponse")]
        System.Threading.Tasks.Task RemoveToDoDateAsync(int userId, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveFriend", ReplyAction="http://tempuri.org/IService/RemoveFriendResponse")]
        void RemoveFriend(string email, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveFriend", ReplyAction="http://tempuri.org/IService/RemoveFriendResponse")]
        System.Threading.Tasks.Task RemoveFriendAsync(string email, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddPlan", ReplyAction="http://tempuri.org/IService/AddPlanResponse")]
        void AddPlan(string image, string name, int importance, string note, string time, string date, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddPlan", ReplyAction="http://tempuri.org/IService/AddPlanResponse")]
        System.Threading.Tasks.Task AddPlanAsync(string image, string name, int importance, string note, string time, string date, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemovePlan", ReplyAction="http://tempuri.org/IService/RemovePlanResponse")]
        void RemovePlan(string image, string name, string note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemovePlan", ReplyAction="http://tempuri.org/IService/RemovePlanResponse")]
        System.Threading.Tasks.Task RemovePlanAsync(string image, string name, string note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EnterClient", ReplyAction="http://tempuri.org/IService/EnterClientResponse")]
        bool EnterClient(ExamMaterialWpf.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EnterClient", ReplyAction="http://tempuri.org/IService/EnterClientResponse")]
        System.Threading.Tasks.Task<bool> EnterClientAsync(ExamMaterialWpf.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetClientList", ReplyAction="http://tempuri.org/IService/GetClientListResponse")]
        ExamMaterialWpf.ServiceReference1.Client[] GetClientList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetClientList", ReplyAction="http://tempuri.org/IService/GetClientListResponse")]
        System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.Client[]> GetClientListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFriendsList", ReplyAction="http://tempuri.org/IService/GetFriendsListResponse")]
        ExamMaterialWpf.ServiceReference1.Friend[] GetFriendsList(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFriendsList", ReplyAction="http://tempuri.org/IService/GetFriendsListResponse")]
        System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.Friend[]> GetFriendsListAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlansList", ReplyAction="http://tempuri.org/IService/GetPlansListResponse")]
        ExamMaterialWpf.ServiceReference1.Plan[] GetPlansList(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlansList", ReplyAction="http://tempuri.org/IService/GetPlansListResponse")]
        System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.Plan[]> GetPlansListAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetToDoDateList", ReplyAction="http://tempuri.org/IService/GetToDoDateListResponse")]
        ExamMaterialWpf.ServiceReference1.ToDoDate[] GetToDoDateList(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetToDoDateList", ReplyAction="http://tempuri.org/IService/GetToDoDateListResponse")]
        System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.ToDoDate[]> GetToDoDateListAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Send", ReplyAction="http://tempuri.org/IService/SendResponse")]
        bool Send(string nameFrom, string message, string nameTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Send", ReplyAction="http://tempuri.org/IService/SendResponse")]
        System.Threading.Tasks.Task<bool> SendAsync(string nameFrom, string message, string nameTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ExitClient", ReplyAction="http://tempuri.org/IService/ExitClientResponse")]
        void ExitClient(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ExitClient", ReplyAction="http://tempuri.org/IService/ExitClientResponse")]
        System.Threading.Tasks.Task ExitClientAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateProfile", ReplyAction="http://tempuri.org/IService/UpdateProfileResponse")]
        void UpdateProfile(ExamMaterialWpf.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateProfile", ReplyAction="http://tempuri.org/IService/UpdateProfileResponse")]
        System.Threading.Tasks.Task UpdateProfileAsync(ExamMaterialWpf.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SignIn", ReplyAction="http://tempuri.org/IService/SignInResponse")]
        ExamMaterialWpf.ServiceReference1.User SignIn(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SignIn", ReplyAction="http://tempuri.org/IService/SignInResponse")]
        System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.User> SignInAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUser", ReplyAction="http://tempuri.org/IService/GetUserResponse")]
        ExamMaterialWpf.ServiceReference1.User GetUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUser", ReplyAction="http://tempuri.org/IService/GetUserResponse")]
        System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.User> GetUserAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterUser", ReplyAction="http://tempuri.org/IService/RegisterUserResponse")]
        bool RegisterUser(string firstName, string lastName, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterUser", ReplyAction="http://tempuri.org/IService/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string firstName, string lastName, string email, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateListClients", ReplyAction="http://tempuri.org/IService/UpdateListClientsResponse")]
        void UpdateListClients(ExamMaterialWpf.ServiceReference1.Client[] clients);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateChat", ReplyAction="http://tempuri.org/IService/UpdateChatResponse")]
        void UpdateChat(string nameFrom, string message, string image);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ExamMaterialWpf.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<ExamMaterialWpf.ServiceReference1.IService>, ExamMaterialWpf.ServiceReference1.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AddToDoItem(int listId, bool isCheked, string name) {
            base.Channel.AddToDoItem(listId, isCheked, name);
        }
        
        public System.Threading.Tasks.Task AddToDoItemAsync(int listId, bool isCheked, string name) {
            return base.Channel.AddToDoItemAsync(listId, isCheked, name);
        }
        
        public void RemoveToDoItem(int listId, string name) {
            base.Channel.RemoveToDoItem(listId, name);
        }
        
        public System.Threading.Tasks.Task RemoveToDoItemAsync(int listId, string name) {
            return base.Channel.RemoveToDoItemAsync(listId, name);
        }
        
        public void EditToDoItem(string name) {
            base.Channel.EditToDoItem(name);
        }
        
        public System.Threading.Tasks.Task EditToDoItemAsync(string name) {
            return base.Channel.EditToDoItemAsync(name);
        }
        
        public int GetToDoDateId(int userId, string date) {
            return base.Channel.GetToDoDateId(userId, date);
        }
        
        public System.Threading.Tasks.Task<int> GetToDoDateIdAsync(int userId, string date) {
            return base.Channel.GetToDoDateIdAsync(userId, date);
        }
        
        public ExamMaterialWpf.ServiceReference1.ToDoItem[] GetToDoItemsList(int listId) {
            return base.Channel.GetToDoItemsList(listId);
        }
        
        public System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.ToDoItem[]> GetToDoItemsListAsync(int listId) {
            return base.Channel.GetToDoItemsListAsync(listId);
        }
        
        public void AddFriend(string email, int userId) {
            base.Channel.AddFriend(email, userId);
        }
        
        public System.Threading.Tasks.Task AddFriendAsync(string email, int userId) {
            return base.Channel.AddFriendAsync(email, userId);
        }
        
        public void AddToDoDate(int userId, string date, string name) {
            base.Channel.AddToDoDate(userId, date, name);
        }
        
        public System.Threading.Tasks.Task AddToDoDateAsync(int userId, string date, string name) {
            return base.Channel.AddToDoDateAsync(userId, date, name);
        }
        
        public void RemoveToDoDate(int userId, string date) {
            base.Channel.RemoveToDoDate(userId, date);
        }
        
        public System.Threading.Tasks.Task RemoveToDoDateAsync(int userId, string date) {
            return base.Channel.RemoveToDoDateAsync(userId, date);
        }
        
        public void RemoveFriend(string email, int userId) {
            base.Channel.RemoveFriend(email, userId);
        }
        
        public System.Threading.Tasks.Task RemoveFriendAsync(string email, int userId) {
            return base.Channel.RemoveFriendAsync(email, userId);
        }
        
        public void AddPlan(string image, string name, int importance, string note, string time, string date, int userId) {
            base.Channel.AddPlan(image, name, importance, note, time, date, userId);
        }
        
        public System.Threading.Tasks.Task AddPlanAsync(string image, string name, int importance, string note, string time, string date, int userId) {
            return base.Channel.AddPlanAsync(image, name, importance, note, time, date, userId);
        }
        
        public void RemovePlan(string image, string name, string note) {
            base.Channel.RemovePlan(image, name, note);
        }
        
        public System.Threading.Tasks.Task RemovePlanAsync(string image, string name, string note) {
            return base.Channel.RemovePlanAsync(image, name, note);
        }
        
        public bool EnterClient(ExamMaterialWpf.ServiceReference1.User user) {
            return base.Channel.EnterClient(user);
        }
        
        public System.Threading.Tasks.Task<bool> EnterClientAsync(ExamMaterialWpf.ServiceReference1.User user) {
            return base.Channel.EnterClientAsync(user);
        }
        
        public ExamMaterialWpf.ServiceReference1.Client[] GetClientList() {
            return base.Channel.GetClientList();
        }
        
        public System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.Client[]> GetClientListAsync() {
            return base.Channel.GetClientListAsync();
        }
        
        public ExamMaterialWpf.ServiceReference1.Friend[] GetFriendsList(int userId) {
            return base.Channel.GetFriendsList(userId);
        }
        
        public System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.Friend[]> GetFriendsListAsync(int userId) {
            return base.Channel.GetFriendsListAsync(userId);
        }
        
        public ExamMaterialWpf.ServiceReference1.Plan[] GetPlansList(int userId) {
            return base.Channel.GetPlansList(userId);
        }
        
        public System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.Plan[]> GetPlansListAsync(int userId) {
            return base.Channel.GetPlansListAsync(userId);
        }
        
        public ExamMaterialWpf.ServiceReference1.ToDoDate[] GetToDoDateList(int userId) {
            return base.Channel.GetToDoDateList(userId);
        }
        
        public System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.ToDoDate[]> GetToDoDateListAsync(int userId) {
            return base.Channel.GetToDoDateListAsync(userId);
        }
        
        public bool Send(string nameFrom, string message, string nameTo) {
            return base.Channel.Send(nameFrom, message, nameTo);
        }
        
        public System.Threading.Tasks.Task<bool> SendAsync(string nameFrom, string message, string nameTo) {
            return base.Channel.SendAsync(nameFrom, message, nameTo);
        }
        
        public void ExitClient(string name) {
            base.Channel.ExitClient(name);
        }
        
        public System.Threading.Tasks.Task ExitClientAsync(string name) {
            return base.Channel.ExitClientAsync(name);
        }
        
        public void UpdateProfile(ExamMaterialWpf.ServiceReference1.User user) {
            base.Channel.UpdateProfile(user);
        }
        
        public System.Threading.Tasks.Task UpdateProfileAsync(ExamMaterialWpf.ServiceReference1.User user) {
            return base.Channel.UpdateProfileAsync(user);
        }
        
        public ExamMaterialWpf.ServiceReference1.User SignIn(string email, string password) {
            return base.Channel.SignIn(email, password);
        }
        
        public System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.User> SignInAsync(string email, string password) {
            return base.Channel.SignInAsync(email, password);
        }
        
        public ExamMaterialWpf.ServiceReference1.User GetUser(string email) {
            return base.Channel.GetUser(email);
        }
        
        public System.Threading.Tasks.Task<ExamMaterialWpf.ServiceReference1.User> GetUserAsync(string email) {
            return base.Channel.GetUserAsync(email);
        }
        
        public bool RegisterUser(string firstName, string lastName, string email, string password) {
            return base.Channel.RegisterUser(firstName, lastName, email, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string firstName, string lastName, string email, string password) {
            return base.Channel.RegisterUserAsync(firstName, lastName, email, password);
        }
    }
}
